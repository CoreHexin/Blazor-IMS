@page "/produce"
@rendermode InteractiveServer

@using IMS.CoreBusiness
@using IMS.UseCases.Activities.Interfaces
@using IMS.UseCases.Products.Interfaces
@using IMS.WebApp.Components.Controls.Common
@using IMS.WebApp.ViewModels
@using static IMS.WebApp.Components.Controls.Common.AutoCompleteComponent

@inject IProduceProductUseCase ProduceProductUseCase
@inject IViewProductsByNameUseCase ViewProductsByNameUseCase
@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject IJSRuntime JSRuntime

<h3>产品生产</h3>

<EditForm id="produce-form" Model="produceViewModel" OnValidSubmit="Produce">
    <DataAnnotationsValidator />

    <div class="form-group mb-3">
        <label for="productionNumber">生产编号</label>
        <InputText id="productionNumber" @bind-Value=produceViewModel.ProductionNumber class="form-control" />
        <ValidationMessage For="() => produceViewModel.ProductionNumber" />
    </div>

    <div class="form-group mb-3">
        <AutoCompleteComponent Label="选择产品" SearchFunction="SearchProduct" SelectedCallback="OnSelected" />
        <ValidationMessage For="() => produceViewModel.ProductId" />
    </div>

    <div class="form-group mb-3">
        <label for="quantity">数量</label>
        <InputNumber id="quantity" @bind-Value=produceViewModel.QuantityToProduce class="form-control" />
        <ValidationMessage For="() => produceViewModel.QuantityToProduce" />
    </div>

    <button type="submit" class="btn btn-primary">提交</button>
</EditForm>


@code {
    private ProduceViewModel produceViewModel = new ProduceViewModel();

    private Product? selectedProduct;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("preventFormSubmission", "produce-form");
        }
    }

    private async Task Produce()
    {
        await ProduceProductUseCase.ExecuteAsync(
            produceViewModel.ProductionNumber, 
            selectedProduct, 
            produceViewModel.QuantityToProduce, 
            "hexin"
        );

        produceViewModel = new ProduceViewModel();
        selectedProduct = null;
    }

    private async Task<List<ItemViewModel>?> SearchProduct(string name)
    {
        var products = await ViewProductsByNameUseCase.ExecuteAsync(name);
        if (!products.Any())
            return null;

        return products.Select(p => new ItemViewModel { Id = p.Id, Name = p.Name }).ToList();
    }

    private async Task OnSelected(ItemViewModel? item)
    {
        if (item is null)
        {
            produceViewModel.ProductId = 0;
            produceViewModel.QuantityToProduce = 0;
            return;
        }

        selectedProduct = await ViewProductByIdUseCase.ExecuteAsync(item.Id);
        if (selectedProduct is null)
            return;

        produceViewModel.Product = selectedProduct;
        produceViewModel.ProductId = item.Id;
    }
}
