@page "/sell"
@rendermode InteractiveServer
@attribute [Authorize]

@using IMS.CoreBusiness
@using IMS.UseCases.Activities.Interfaces
@using IMS.UseCases.Products
@using IMS.UseCases.Products.Interfaces
@using IMS.WebApp.Components.Controls.Common
@using IMS.WebApp.ViewModels
@using static IMS.WebApp.Components.Controls.Common.AutoCompleteComponent

@inject ISellProductUseCase SellProductUseCase
@inject IViewProductsByNameUseCase ViewProductsByNameUseCase
@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>产品销售</h3>

<EditForm id="sell-form" Model="sellViewModel" OnValidSubmit="Sell">
    <DataAnnotationsValidator />

    <div class="form-group mb-3">
        <label for="orderNumber">订单编号</label>
        <InputText id="orderNumber" @bind-Value=sellViewModel.OrderNumber class="form-control" />
        <ValidationMessage For="() => sellViewModel.OrderNumber" />
    </div>

    <div class="form-group mb-3">
        <AutoCompleteComponent Label="选择产品" SearchFunction="SearchProduct" SelectedCallback="OnSelected" />
        <ValidationMessage For="() => sellViewModel.ProductId" />
    </div>

    <div class="form-group mb-3">
        <label for="quantity">数量</label>
        <InputNumber id="quantity" @bind-Value=sellViewModel.QuantityToSell class="form-control" />
        <ValidationMessage For="() => sellViewModel.QuantityToSell" />
    </div>

    <div class="form-group mb-3">
        <label for="price">单价</label>
        <InputNumber id="price" @bind-Value=sellViewModel.UnitPrice class="form-control" />
        <ValidationMessage For="() => sellViewModel.UnitPrice" />
    </div>


    <button type="submit" class="btn btn-primary">提交</button>
</EditForm>


@code {
    private SellViewModel sellViewModel = new SellViewModel();

    private Product? selectedProduct;

    private AuthenticationState? authenticationState;

    protected override async Task OnInitializedAsync()
    {
        authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("preventFormSubmission", "sell-form");
        }
    }

    private async Task<List<ItemViewModel>?> SearchProduct(string name)
    {
        var products = await ViewProductsByNameUseCase.ExecuteAsync(name);
        if (!products.Any())
            return null;

        return products.Select(p => new ItemViewModel { Id = p.Id, Name = p.Name }).ToList();
    }

    private async Task OnSelected(ItemViewModel? item)
    {
        if (item is null)
        {
            return;
        }

        selectedProduct = await ViewProductByIdUseCase.ExecuteAsync(item.Id);

        if (selectedProduct is null)
            return;

        sellViewModel.Product = selectedProduct;
        sellViewModel.ProductId = item.Id;
        sellViewModel.UnitPrice = selectedProduct.Price;
    }

    private async Task Sell()
    {
        if (authenticationState is null ||
            authenticationState.User is null ||
            authenticationState.User.Identity is null)
        {
            return;
        }

        if (!authenticationState.User.Identity.IsAuthenticated)
        {
            return;
        }

        string userName = authenticationState.User.Identity.Name!;

        await SellProductUseCase.ExecuteAsync(
            sellViewModel.OrderNumber, 
            selectedProduct, 
            sellViewModel.QuantityToSell, 
            sellViewModel.UnitPrice,
            userName
        );

        sellViewModel = new SellViewModel();
        selectedProduct = null;
    }
}
