@page "/inventory/edit/{id:int}"
@rendermode InteractiveServer

@using IMS.CoreBusiness
@using IMS.UseCases.Inventories.Interfaces

@inject IViewInventoryByIdUseCase ViewInventoryByIdUseCase
@inject IEditInventoryUseCase EditInventoryUseCase
@inject NavigationManager NavigationManager

<h3>编辑物料</h3>

@if (inventory is not null)
{
    <EditForm Model="inventory" OnValidSubmit="UpdateInventory">
        <DataAnnotationsValidator />

        <InputNumber @bind-Value=inventory.Id hidden />

        <div class="form-group mb-3">
            <label for="name">物料名称</label>
            <InputText id="name" @bind-Value=inventory.Name class="form-control" />
            <ValidationMessage For="() => inventory.Name" />
        </div>

        <div class="form-group mb-3">
            <label for="quantity">数量</label>
            <InputNumber id="quantity" @bind-Value=inventory.Quantity class="form-control" />
            <ValidationMessage For="() => inventory.Quantity" />
        </div>

        <div class="form-group mb-3">
            <label for="price">价格</label>
            <InputNumber id="price" @bind-Value=inventory.Price class="form-control" />
            <ValidationMessage For="() => inventory.Price" />
        </div>

        <button type="submit" class="btn btn-primary">更新</button>
        <a href="/inventories" class="btn btn-primary">取消</a>
    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Inventory? inventory { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (inventory is null)
        {
            inventory = await ViewInventoryByIdUseCase.ExecuteAsync(Id);
        }
    }

    private async Task UpdateInventory()
    {
        if (inventory is not null)
        {
            await EditInventoryUseCase.ExecuteAsync(inventory);
            NavigationManager.NavigateTo("/inventories");
        }
    }
}
