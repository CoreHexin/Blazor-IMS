@page "/Account/ManageUser/{userId}"
@using IMS.WebApp.Data
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations

@attribute [Authorize(Policy = "Admin")]

@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager

<h3>用户信息</h3>
@if (manageUserViewModel is not null)
{
    <EditForm FormName="userInfoForm" Model="manageUserViewModel" OnValidSubmit="Update">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group mb-3">
            <label for="email">邮箱地址</label>
            <input id="email" type="text" class="form-control" value="@manageUserViewModel.Email" readonly />
        </div>

        <div class="form-group mb-3">
            <label for="department">部门</label>
            <InputSelect id="department" type="text" class="form-control" @bind-Value=manageUserViewModel.Department>
                @if (manageUserViewModel.Department == "Administration")
                {
                    <option value="Administration" selected>Administration</option>
                }
                else
                {
                    <option value="Administration">Administration</option>
                }

                @if (manageUserViewModel.Department == "InventoryManagement")
                {
                    <option value="InventoryManagement" selected>Inventory Management</option>
                }
                else
                {
                    <option value="InventoryManagement">Inventory Management</option>
                }
            </InputSelect>
        </div>

        <button type="submit" class="btn btn-primary">更新</button>
        <a href="/account/manageusers" class="btn btn-primary">取消</a>
    </EditForm>
}


@code {
    [Parameter]
    public string UserId { get; set; } = string.Empty;

    [SupplyParameterFromForm]
    private ManageUserViewModel? manageUserViewModel { get; set; }

    private ApplicationUser? user;
    private Claim? departmentClaim;
    private bool userHadDepartment = true;
    private const string cstrDepartment = "Department";

    protected override async Task OnParametersSetAsync()
    {
        user = await UserManager.FindByIdAsync(UserId);

        if (user is null)
            return;

        var claims = await UserManager.GetClaimsAsync(user);
        departmentClaim = claims.FirstOrDefault(claim => claim.Type == cstrDepartment);

        if (departmentClaim is null)
        {
            userHadDepartment = false;
            departmentClaim = new Claim(cstrDepartment, string.Empty);
        }

        manageUserViewModel ??= new ManageUserViewModel
        {
            Email = user.Email!,
            Department = departmentClaim.Value
        };
    }

    private async Task Update()
    {
        if (user is null || departmentClaim is null || manageUserViewModel is null)
            return;

        if (userHadDepartment)
        {
            await UserManager.ReplaceClaimAsync(
                user,
                departmentClaim,
                new Claim(cstrDepartment, manageUserViewModel.Department)
            );
        }
        else
        {
            await UserManager.AddClaimAsync(
                user, 
                new Claim(cstrDepartment, manageUserViewModel.Department)
            );
        }

        NavigationManager.NavigateTo("/account/manageusers");
    }

    public class ManageUserViewModel
    {
        public string Email { get; set; } = string.Empty;

        [Required]
        public string Department { get; set; } = string.Empty;
    }
}
